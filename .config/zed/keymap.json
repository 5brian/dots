// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Workspace",
    "bindings": {
      // "shift shift": "command_palette::Toggle",
      "cmd-j": "command_palette::Toggle",
      "cmd-t": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "EmptyPane || vim_operator == none && vim_mode != insert",
    "bindings": {
      "space space": "tab_switcher::Toggle",
      "space s g": "pane::DeploySearch",
      "space s f": "file_finder::Toggle",
      "space s d": "diagnostics::Deploy",
      "space s s": "project_symbols::Toggle",
      "space g b": "editor::ToggleGitBlame"
    }
  },
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "shift-j": "vim::ScrollDown",
      "shift-k": "vim::ScrollUp",
      "shift-h": "editor::Hover",
      "shift-l": "vim::JoinLines",
      "ctrl-d": "vim::NextSectionStart",
      "ctrl-u": "vim::PreviousSectionStart",
      "ctrl-n": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "ctrl-n": "workspace::ToggleRightDock"
    }
  },
  // tweaks
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      "shift-y": ["workspace::SendKeystrokes", "y $"] // Use neovim's yank behavior: yank to end of line.
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "b": "vim::AnyBrackets"
    }
  },
  // global nav
  {
    "context": "ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView || Dock",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // wm conflict
  {
    "context": "Editor && mode == full && edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::NextEditPrediction"
    }
  },
  {
    "context": "Editor && !edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::ShowEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "ctrl-y": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::AcceptEditPrediction"
    }
  }

  // -- Keymaps
  //
  // -- Keybinds to make split navigation easier.
  // --  Use CTRL+<hjkl> to switch between windows
  // --
  // --  See `:help wincmd` for a list of all window commands
  //
  // vim.keymap.set('n', '<C-h>', '<C-w><C-h>', { desc = 'Move focus to the left window' })
  // vim.keymap.set('n', '<C-l>', '<C-w><C-l>', { desc = 'Move focus to the right window' })
  // vim.keymap.set('n', '<C-j>', '<C-w><C-j>', { desc = 'Move focus to the lower window' })
  // vim.keymap.set('n', '<C-k>', '<C-w><C-k>', { desc = 'Move focus to the upper window' })
  //
  // vim.api.nvim_set_keymap('n', '<C-n>', ':NvimTreeToggle<CR>', { noremap = true, silent = true })
  //
  // vim.api.nvim_set_keymap('n', '<S-j>', '26j', { noremap = true, silent = true })
  // vim.api.nvim_set_keymap('n', '<S-k>', '26k', { noremap = true, silent = true })
]
