// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Workspace",
    "bindings": {
      "cmd-j": "command_palette::Toggle",
      "cmd-t": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "EmptyPane || vim_operator == none && vim_mode != insert",
    "bindings": {
      "space space": "tab_switcher::Toggle",
      "space s g": "pane::DeploySearch",
      "space s f": "file_finder::Toggle",
      "space s d": "diagnostics::Deploy",
      "space s s": "project_symbols::Toggle",
      "space s a": "assistant::ToggleFocus",
      "space d s": "outline::Toggle",
      "space g g": "git_panel::ToggleFocus",
      "space g b": "git::Blame",
      "space g s": "git::Branch",
      "space h d": "git::Diff",
      "space h p": "editor::ToggleSelectedDiffHunks",
      "space h shift-p": "editor::ExpandAllDiffHunks",
      "space h r": "git::Restore",
      "space h shift-r": "git::RestoreFile",
      "space h s": "git::ToggleStaged",
      "space h n": "git::StageAndNext",
      "space h shift-s": "git::StageAll",
      "space h u": "git::UnstageAndNext",
      "space h shift-u": "git::UnstageAll",
      "space r": "editor::Rename",
      "space f": "editor::Format",
      "space c": "editor::ToggleCodeActions"
    }
  },
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "shift-j": "vim::ScrollDown",
      "shift-k": "vim::ScrollUp",
      "shift-h": "editor::Hover",
      "shift-l": "vim::JoinLines",
      "ctrl-d": "vim::NextMethodStart",
      "ctrl-u": "vim::PreviousMethodStart",
      "ctrl-n": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "ctrl-n": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "TabSwitcher",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-d": "tab_switcher::CloseSelectedItem"
    }
  },
  {
    "context": "Editor && showing_completions",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::ConfirmCompletion",
      "enter": "editor::Newline"
    }
  },
  // vim tweaks
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      "shift-y": ["workspace::SendKeystrokes", "y $"] // Use neovim's yank behavior: yank to end of line.
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "b": "vim::AnyBrackets"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "shift-s": ["vim::PushAddSurrounds", {}]
    }
  },
  // global nav
  {
    "context": "ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView || Dock",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // wm conflict
  {
    "context": "Editor && mode == full && edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "alt-y": "editor::NextEditPrediction"
    }
  },
  {
    "context": "Editor && !edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "alt-y": "editor::ShowEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-y": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "use_key_equivalents": true,
    "bindings": {
      "alt-y": "editor::AcceptEditPrediction"
    }
  }
]
